
AVRASM ver. 2.2.7  C:\Users\Student\Desktop\DigitalSystemsLabExam\InnocentLunikaElectronicCalculatorSolution\InnocentLunikaElectronicCalculatorSolution\main.asm Mon Oct 16 16:39:26 2023

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m32def.inc'
C:\Users\Student\Desktop\DigitalSystemsLabExam\InnocentLunikaElectronicCalculatorSolution\InnocentLunikaElectronicCalculatorSolution\main.asm(25): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m32def.inc'
C:\Users\Student\Desktop\DigitalSystemsLabExam\InnocentLunikaElectronicCalculatorSolution\InnocentLunikaElectronicCalculatorSolution\main.asm(32): warning: Register r26 already defined by the .DEF directive
C:\Users\Student\Desktop\DigitalSystemsLabExam\InnocentLunikaElectronicCalculatorSolution\InnocentLunikaElectronicCalculatorSolution\main.asm(33): warning: Register r27 already defined by the .DEF directive
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m32def.inc'
C:\Users\Student\Desktop\DigitalSystemsLabExam\InnocentLunikaElectronicCalculatorSolution\InnocentLunikaElectronicCalculatorSolution\main.asm(25): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m32def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 #define _M32DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32
                                 #pragma AVRPART ADMIN PART_NAME ATmega32
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler bits
                                 .equ	TWPS1	= 1	; TWI Prescaler bits
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x085f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 
                                 ; InnocentLunikaElectronicCalculatorSolution.asm
                                 ;
                                 ; Created: 2023/05/03 11:04:59 AM
                                 ; Author : Innocent Lunika 214502116
                                 ;
                                 
                                 
                                 ;*********************************************************************************
                                 ;			LABORATORY PROGRAM
                                 ;			TITLE: ELECTRONIC CALCULATOR
                                 ;			PART A : READING THE KEYPAD AND DISPLAYING THE VALUE ON AN LCD
                                 ;			PROGRAM VERSION 1 SEM 1 11TH APRILL 2012
                                 ;			AUTHOR: TOM WALINGO
                                 ;			CLOCK FREQUENCY 18MHZ
                                 ;
                                 ;			MODIFIED BY: RAY KHUBONI
                                 ;			PROGRAM VERSION 2 SEMESTER 1 9TH APRIL 2014
                                 ;
                                 ;			MODIFIED BY: LEBOHANG TLADI
                                 ;			PROGRAM VERSION 3 SEMESTER 1 26TH APRIL 2023
                                 ;****************************************************************************
                                 ; HEADER FILES SECTION
                                 .list
                                 ;***************************************************************************
                                 ;DEFINITIONS SECTION
                                 .def Temp	= r16
                                 .def Temp1	= r17
                                 .def Temp5	= r18
                                 .DEF temp6 = r26 //**************************ADDED this
                                 .DEF temp7 = r27 //**************************ADDED this
                                 	;KEYPAD LINES AND PORTS
                                 	.def keycode	= r19
                                 	.def input		= r20
                                 	.def lastKey	= r21
                                 	.def Temp2		= r22
                                 	.def Temp3		= r23
                                 	.def operator	= r24
                                 	.def Temp4		= r25
                                 	#define operand_count XL ; avoid redefinitions
                                 
                                 	.equ KEYPAD_DATA_PORT	= PORTA
                                 	.equ KEYPAD_PIN_PORT	= PINA
                                 	.equ KEYPAD_DIR			= DDRA
                                 
                                 	.equ COL1 = 7 ;keypad output columns
                                 	.equ COL2 = 6
                                 	.equ COL3 = 5
                                 	.equ COL4 = 4
                                 	.equ ROW1 = 3 ;keypad input rows
                                 	.equ ROW2 = 2
                                 	.equ ROW3 = 1
                                 	.equ ROW4 = 0
                                 
                                 ;LCD LINES AND PORTS: DATA --&gt; PORTD, CONTROL PORTB
                                 .equ LCD_DATA_PORT		= PORTD
                                 .equ LCD_DATA_DIR		= DDRD
                                 .equ LCD_CONTROL_PORT	= PORTB
                                 .equ LCD_CONTROL_DIR	= DDRB
                                 
                                 .equ LCD_RS		= 0
                                 .equ LCD_RW		= 1
                                 .equ LCD_E		= 2
                                 .equ LCD_D7		= 7
                                 ;***************************************************************************
                                 
                                 .CSEG
                                 .org 0x0000
                                 
000000 c032                      rjmp setup
                                 
                                 .org 0x1F
00001f 3231
000020 2d33
000021 3534
000022 2a36
000023 3837
000024 fd39
000025 302e
000026 2b3d                      KEYS: .db '1','2','3','-','4','5','6','*','7','8','9',0xFD,'.','0','=','+';
                                 
                                 .org 0x0029
000029 695a
00002a 6870
00002b 206f
00002c 756c
00002d 696e
00002e 616b
00002f 2020
000030 2001
000031 6163
000032 006c                      msg: .db "Zipho lunika  ",1," ","cal",0;
                                 ;***************************************************************************
                                 ;CONFIGURATION SECTION
                                 setup:
000033 e008                      	ldi Temp,HIGH(RAMEND) ; Set the stack
000034 bf0e                      	out SPH,Temp
000035 e50f                      	ldi Temp,LOW(RAMEND)
000036 bf0d                      	out SPL,Temp
                                 
000037 ef0f                      	ldi Temp, 0XFF ;Configuring LCD port as output(PORTD)
000038 bb01                      	out LCD_DATA_DIR, Temp
000039 bb07                      	out LCD_CONTROL_DIR, Temp
                                 
00003a e50f                      	ldi temp, low(RAMEND)
00003b bf0d                      	out SPL, temp
00003c e008                      	ldi temp, high(RAMEND)
00003d bf0e                      	out SPH, temp
                                 
00003e d12a                      	rcall Delay_2milli
00003f d0bd                      	rcall LCD_INIT ;initialize the lcd
000040 d128                      	rcall delay_2milli
000041 d127                      	rcall delay_2milli
                                 
000042 e00f                      	ldi Temp, 0x0F ;keypad setup
000043 bb0a                      	out KEYPAD_DIR, Temp
000044 ef00                      	ldi Temp, 0xF0
                                 	;out KEYPAD_DATA_PORT, Temp
000045 ef3f                      	ldi keycode, 255
000046 d130                      	rcall delay_50milli
000047 e0f0                      	ldi zh, high(msg<<1)
000048 e5e2                      	ldi zl, low(msg<<1)
000049 2700                      	clr temp
                                 
                                 welcome: ;Displays welcome message
00004a 9105                      	lpm Temp, z+
00004b 3000                      	cpi Temp, 0
00004c f039                      	breq start
00004d 3001                      	cpi Temp, 1
00004e f011                      	breq newLine
00004f d0c1                      	rcall LCD_DATA
000050 cff9                      	rjmp welcome
                                 
                                 newLine:
000051 ec00                      	ldi Temp, 0xC0
000052 d0b3                      	rcall LCD_COMMAND
000053 cff6                      	rjmp welcome
                                 
                                 start:
000054 e00c                      	ldi temp, 0xC
000055 d0b0                      	rcall LCD_COMMAND
000056 ef2f                      	ldi temp5, 255
000057 e0a0                      	ldi operand_count, 0
                                 
000058 2766                      	clr Temp2
000059 2777                      	clr Temp3
00005a 2788                      	clr operator
                                 
                                 loop:
00005b e3ee                      	ldi ZL, low(keys<<1)
00005c e0f0                      	ldi ZH, high(keys<<1) ;reset z to point to key table
00005d 2f53                      	mov lastKey, keycode
00005e d0cc                      	rcall SCAN ;get input
00005f 3134                      	cpi keycode, 20
000060 f3d1                      	breq loop
000061 1735                      	cp keycode, lastKey ;button must be released
000062 f3c1                      	breq loop
                                 
000063 ef1f                      	ldi temp1, 255
000064 1321                      	cpse temp5, temp1 ; clear the screen on first key press
000065 c001                      	rjmp continue
000066 d08e                      	rcall clear_screen
                                 
                                 continue:
000067 0fe3                      	add ZL, keycode ; Decoding!!!!
000068 9104                      	lpm temp, z
000069 2f10                      	mov temp1, temp
00006a d0a6                      	rcall LCD_DATA ;input to screen
                                 	;handle input here
00006b 2f41                      	mov Input, temp1
00006c 701f                      	andi temp1, 0x0F
00006d 301a                      	cpi temp1, 10
00006e f008                      	BRLO handle_digit
00006f f4a0                      	BRSH handle_operator
                                 
                                 handle_digit: ;if input is a digit
000070 704f                      	andi Input, 0x0F ;clear high nibble (so it&#39;s a pure value)
000071 e00a                      	ldi temp, 10
000072 30a1                      	cpi operand_count, 1
000073 f041                      	breq save_op2
                                 
                                 save_op1:
000074 9f60                      	mul Temp2, temp
000075 e010                      	ldi temp1, 0
000076 1211                      	cpse r1, temp1
000077 c030                      	rjmp overflow_error ;if it overflows 8bit value limit
000078 2d60                      	mov Temp2, r0
000079 0f64                      	add Temp2, input
00007a f168                      	BRCS overflow_error ;if it overflows 8bit value limit
00007b cfdf                      	rjmp loop
                                 
                                 save_op2:
00007c 9f70                      	mul Temp3, temp
00007d e010                      	ldi temp1, 0
00007e 1211                      	cpse r1, temp1
00007f c028                      	rjmp overflow_error ;if it overflows 8bit value limit
000080 2d70                      	mov Temp3, r0
000081 0f74                      	add Temp3, input
000082 f128                      	BRCS overflow_error ;if it overflows 8bit value limit
000083 cfd7                      	rjmp loop
                                 handle_operator: ;if input is an operator
000084 30a1                      	cpi operand_count, 1 ;if on the first operand, the operator must be saved and waitfor second operand
000085 f019                      	breq second_operand
                                 
                                 first_operand:
000086 95a3                      	inc operand_count
000087 2f84                      	mov operator, input
000088 cfd2                      	rjmp loop
                                 
                                 second_operand:
                                 	;if it's anything other than '=', give error
000089 334d                      	cpi input, 0x3D
00008a f009                      	breq calculate
00008b c01c                      	rjmp overflow_error
                                 
                                 calculate:
00008c 328a                      	cpi operator, 0x2A
00008d f179                      	breq multiplication
00008e 328b                      	cpi operator, 0x2B
00008f f189                      	breq addition
000090 328d                      	cpi operator, 0x2D
000091 f0a9                      	breq subt
000092 3f8d                      	cpi operator, 0xFD
000093 f189                      	breq division
                                 	calc:
000094 ec00                      	ldi temp, 0xC0
000095 d070                      	rcall LCD_COMMAND
000096 d0c8                      	rcall DELAY
000097 d0c7                      	rcall DELAY
000098 e70e                      	ldi temp, 0x7E
000099 d077                      	rcall LCD_DATA
00009a 2766                      	clr Temp2
00009b 2777                      	clr Temp3
00009c 27aa                      	clr operand_count
                                 calc_loop:
00009d 2f53                      	mov lastKey, keycode
00009e d08c                      	rcall SCAN ;get input
00009f 3134                      	cpi keycode, 20
0000a0 f3e1                      	breq calc_loop
0000a1 1735                      	cp keycode, lastKey ;button must be released
0000a2 f3d1                      	breq calc_loop
0000a3 e001                      	ldi temp, 0x01
0000a4 d061                      	rcall LCD_COMMAND
0000a5 ef3f                      	ldi keycode, 255
0000a6 cf8c                      	rjmp setup
                                 
0000a7 c032                      subt: rjmp subtraction
                                 
                                 overflow_error: ;if there is an overflow
                                 	;display error, wait for button press, then reset
0000a8 d04c                      	rcall clear_screen
0000a9 e605                      	ldi temp, 'e'
0000aa d066                      	rcall LCD_DATA
0000ab e702                      	ldi temp, 'r'
0000ac d064                      	rcall LCD_DATA
0000ad e702                      	ldi temp, 'r'
0000ae d062                      	rcall LCD_DATA
0000af e60f                      	ldi temp, 'o'
0000b0 d060                      	rcall LCD_DATA
0000b1 e702                      	ldi temp, 'r'
                                 
0000b2 d05e                      	rcall LCD_DATA
                                 	overflow_error_loop:
0000b3 2f53                      	mov lastKey, keycode
0000b4 d076                      	rcall SCAN ;get input
0000b5 3134                      	cpi keycode, 20
0000b6 f3e1                      	breq overflow_error_loop
0000b7 1735                      	cp keycode, lastKey ;button must be released
0000b8 f3d1                      	breq overflow_error_loop
0000b9 e001                      	ldi temp, 0x01
0000ba d04b                      	rcall LCD_COMMAND
0000bb ef3f                      	ldi keycode, 255
0000bc cf76                      	rjmp setup
                                 
                                 ;********************	Missing Code Starts Here	********************
                                 ;		Move your your results to ans
                                 /*						Multiplication Subroutine					  */
                                 multiplication:
0000bd 9f67                      mul temp2, temp3 ; perform multiplication and store the result in r1:r0
0000be 2d90                      mov temp4, r0 ; move the lower byte of the result to temp4
0000bf d01e                      	rcall DISPLAY_ANS
0000c0 cfd3                      	rjmp calc
                                 
                                 /*						Addition Subroutine							 */
                                 addition:
                                 	/*		missing code for Addition		*/
0000c1 0f67                      		add temp2, temp3 ; add the two operands and store the result in temp2
0000c2 2f96                      mov temp4, temp2 ; move the result to temp4
                                 //ldi temp4, 42;
0000c3 d01a                      	rcall DISPLAY_ANS
0000c4 cfcf                      	rjmp calc
                                 	/*						division Subroutine							*/
                                 division:
0000c5 2711                      	clr temp1 ;remainder
0000c6 2722                      	clr temp5 ;counter (quotient)*/
0000c7 2f16                      	mov temp1, temp2;
0000c8 9523                         L2:  INC temp5
0000c9 1b17                      	 SUB temp1, temp3;
0000ca f7e8                      	 BRCC L2	;branch if C is zero
0000cb 952a                      	 DEC temp5 ;ONCE TOO MANY
0000cc 0f17                      	 ADD temp1, temp3 ; ADD BACK TO IT
0000cd 2f92                      	 mov temp4, temp5;
                                 
                                 	
                                 	/*		missing code for division	.1	*/
                                 	
0000ce d00f                      	rcall DISPLAY_ANS
0000cf cfc4                      	rjmp calc
                                 div8: 
0000d0 2711                      	clr temp1 ;remainder
0000d1 2722                      	clr temp5 ;counter (quotient)*/
0000d2 2f16                      	mov temp1, temp2;
0000d3 9523                      L1:  INC temp5
0000d4 1b17                      	 SUB temp1, temp3;
0000d5 f7e8                      	 BRCC L1	;branch if C is zero
0000d6 952a                      	 DEC temp5 ;ONCE TOO MANY
0000d7 0f17                      	 ADD temp1, temp3 ; ADD BACK TO IT
0000d8 2f92                      	 mov temp4, temp5;
0000d9 9508                      	 ret;
                                 
                                 d8:
                                 	/*		missing code for division	.1	*/
                                 
                                 div_done:
                                 	/*		missing code for division	.1	*/
                                 //	ret
                                 
                                 /*						Subtruction Subroutine					  */
                                 subtraction:
                                 	/*		missing code for Subtruction		*/
0000da 1b67                      	sub temp2, temp3 ; subtract temp3 from temp2 and store the result in temp2
0000db 2f96                      mov temp4, temp2 ; move the result to temp4
                                 
0000dc d001                      	rcall DISPLAY_ANS
0000dd cfb6                      	rjmp calc
                                 
                                 ;********************	Missing Code Ends Here	********************
                                 
                                 DISPLAY_ANS: ;format and display the answer
0000de 2788                      	clr operator
0000df 3090                      	cpi Temp4, 0
0000e0 f419                      	brne format
0000e1 e300                      	ldi temp, 0x30
0000e2 d02e                      	rcall LCD_DATA
0000e3 c010                      	rjmp display_done
                                 format:
0000e4 2f69                      	mov Temp2, Temp4
0000e5 e07a                      	ldi Temp3, 10
0000e6 dfe9                      	rcall div8
0000e7 9583                      	inc operator
0000e8 931f                      	push temp1 ;push remainder
0000e9 3090                      	cpi Temp4, 0; Wierd line
0000ea f009                      	breq display_num
0000eb cff8                      	rjmp format
                                 display_num:
0000ec 3080                      	cpi operator, 0
0000ed f031                      	breq display_done
0000ee 958a                      	dec operator
0000ef 910f                      	pop temp
0000f0 e310                      	ldi temp1, 0x30 ;
0000f1 0f01                      	add temp, temp1 ; converts to ascii!
0000f2 d01e                      	rcall LCD_DATA
0000f3 cff8                      	rjmp display_num
                                 display_done:
0000f4 9508                      	ret
                                 
                                 ; LCD Subroutines
                                 clear_screen: ;clears the screen
0000f5 e001                      	ldi temp, 0x01
0000f6 d00f                      	rcall LCD_COMMAND
0000f7 d071                      	rcall DELAY_2milli
0000f8 d070                      	rcall DELAY_2milli
0000f9 e00f                      	ldi temp, 0xF
0000fa d00b                      	rcall LCD_COMMAND
0000fb 2722                      	clr temp5
0000fc 9508                      ret
                                 
                                 LCD_INIT:
0000fd e308                      	ldi Temp, $38
0000fe d007                      	rcall LCD_COMMAND
0000ff e00f                      	ldi Temp, $0F
000100 d005                      	rcall LCD_COMMAND
000101 e001                      	ldi Temp, $01
000102 d003                      	rcall LCD_COMMAND
000103 e006                      	ldi Temp, $06
000104 d001                      	rcall LCD_COMMAND
000105 9508                      	Ret
                                 
                                 LCD_COMMAND:
000106 bb02                      	out LCD_DATA_PORT, Temp
000107 98c0                      	cbi LCD_CONTROL_PORT, LCD_RS
000108 98c1                      	cbi LCD_CONTROL_PORT, LCD_RW
000109 9ac2                      	sbi LCD_CONTROL_PORT, LCD_E
00010a 0000                      	nop
                                 
00010b 0000                      	nop
00010c 98c2                      	cbi LCD_CONTROL_PORT, LCD_E
00010d e000                      	ldi temp, 0x00
00010e bb02                      	out LCD_DATA_PORT, Temp
00010f d00c                      	rcall LCD_BUSY
000110 9508                      	Ret
                                 
                                 LCD_DATA:
000111 bb02                      	out LCD_DATA_PORT, Temp
000112 9ac0                      	sbi LCD_CONTROL_PORT, LCD_RS
000113 98c1                      	cbi LCD_CONTROL_PORT, LCD_RW
000114 9ac2                      	sbi LCD_CONTROL_PORT, LCD_E
000115 0000                      	nop
000116 0000                      	nop
000117 98c2                      	cbi LCD_CONTROL_PORT, LCD_E
000118 e000                      	ldi temp, 0x00
000119 bb02                      	out LCD_DATA_PORT, Temp
00011a d001                      	rcall LCD_BUSY
00011b 9508                      	Ret
                                 
                                 LCD_BUSY:
00011c 988f                      	cbi LCD_DATA_DIR, LCD_D7
00011d 98c0                      	cbi LCD_CONTROL_PORT, LCD_RS
00011e 0000                      	nop
00011f 9ac1                      	sbi LCD_CONTROL_PORT, LCD_RW
000120 0000                      	nop
                                 
                                 CHECK:
000121 9ac2                      	sbi LCD_CONTROL_PORT, LCD_E
000122 0000                      	nop
000123 0000                      	nop
000124 0000                      	nop
000125 0000                      	nop
000126 98c2                      	cbi LCD_CONTROL_PORT, LCD_E
000127 99af                      	sbic PORTC, LCD_D7
000128 cff8                      	rjmp CHECK
000129 9a8f                      	sbi LCD_DATA_DIR, LCD_D7
00012a 9508                      	Ret
                                 
                                 ; Scanning keycodes from keypad
                                 SCAN:
00012b e134                      	ldi keycode, 20
                                 
00012c ef00                      	ldi Temp, 0xF0
00012d bb0b                      	out KEYPAD_DATA_PORT, Temp
00012e 0000                      	nop
00012f ef07                      	ldi Temp, 0xF7
000130 bb0b                      	out KEYPAD_DATA_PORT, Temp
000131 0000                      	nop
000132 d03d                      	rcall DELAY_10milli
                                 
000133 9bcf                      	sbis KEYPAD_PIN_PORT, COL1
000134 e030                      	ldi keycode, 0
000135 9bce                      	sbis KEYPAD_PIN_PORT, COL2
000136 e031                      	ldi keycode, 1
000137 9bcd                      	sbis KEYPAD_PIN_PORT, COL3
000138 e032                      	ldi keycode, 2
000139 9bcc                      	sbis KEYPAD_PIN_PORT, COL4
00013a e033                      	ldi keycode, 3
00013b ef0b                      	ldi Temp, 0xFB
00013c bb0b                      	out KEYPAD_DATA_PORT, Temp
00013d 0000                      	nop
00013e 9bcf                      	sbis KEYPAD_PIN_PORT, COL1
00013f e034                      	ldi keycode, 4
000140 9bce                      	sbis KEYPAD_PIN_PORT, COL2
000141 e035                      	ldi keycode, 5
000142 9bcd                      	sbis KEYPAD_PIN_PORT, COL3
000143 e036                      	ldi keycode, 6
000144 9bcc                      	sbis KEYPAD_PIN_PORT, COL4
000145 e037                      	ldi keycode, 7
000146 ef0d                      	ldi Temp, 0xFD
000147 bb0b                      	out KEYPAD_DATA_PORT, Temp
000148 0000                      	nop
000149 9bcf                      	sbis KEYPAD_PIN_PORT, COL1
00014a e038                      	ldi keycode, 8
00014b 9bce                      	sbis KEYPAD_PIN_PORT, COL2
00014c e039                      	ldi keycode, 9
00014d 9bcd                      	sbis KEYPAD_PIN_PORT, COL3
00014e e03a                      	ldi keycode, 10
00014f 9bcc                      	sbis KEYPAD_PIN_PORT, COL4
000150 e03b                      	ldi keycode, 11
000151 ef0e                      	ldi Temp, 0xFE
000152 bb0b                      	out KEYPAD_DATA_PORT, Temp
000153 0000                      	nop
000154 9bcf                      	sbis KEYPAD_PIN_PORT, COL1
000155 e03c                      	ldi keycode, 12
000156 9bce                      	sbis KEYPAD_PIN_PORT, COL2
000157 e03d                      	ldi keycode, 13
000158 9bcd                      	sbis KEYPAD_PIN_PORT, COL3
000159 e03e                      	ldi keycode, 14
00015a 9bcc                      	sbis KEYPAD_PIN_PORT, COL4
00015b e03f                      	ldi keycode, 15
00015c 2700                      	clr Temp
00015d bb0b                      	out keypad_data_port, temp
00015e 9508                      	RET
                                 
                                 DELAY: ;this is probably a bit short
00015f ef1f                      	ldi Temp1, $ff
                                 Delayloop:
000160 951a                      	dec Temp1
000161 f7f1                      	brne Delayloop
000162 9508                      	ret
                                 
                                 Delay_50micro:
000163 931f                      	push temp1
                                 
000164 ef18                      	ldi temp1, 0xF8
                                 	wait_50micro:
000165 5011                      	subi temp1, 0x1
000166 f7f1                      	brne wait_50micro
000167 911f                      	pop temp1
000168 9508                      	ret
                                 
                                 Delay_2milli:
000169 932f                      	push temp5
00016a e228                      	ldi temp5, 0x28
                                 	wait_2milli:
00016b dff7                      	rcall delay_50micro
00016c 5021                      	subi temp5, 0x1
00016d f7e9                      	brne wait_2milli
00016e 912f                      	pop temp5
00016f 9508                      	ret
                                 
                                 delay_10milli:
000170 932f                      	push temp5
000171 ec28                      	ldi temp5, 0xc8
                                 	wait_10milli:
000172 dff0                      	rcall delay_50micro
000173 5021                      	subi temp5, 0x1
000174 f7e9                      	brne wait_10milli
000175 912f                      	pop temp5
000176 9508                      	ret
                                 
                                 delay_50milli:
000177 932f                      	push temp5
000178 e025                      	ldi temp5, 0x05
                                 	wait_50milli:
000179 dff6                      	rcall delay_10milli
00017a 5021                      	subi temp5, 0x1
00017b f7e9                      	brne wait_50milli
00017c 912f                      	pop temp5


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
x  :   0 y  :   0 z  :   2 r0 :   3 r1 :   2 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  61 r17:  27 r18:  23 r19:  30 r20:   6 
r21:   6 r22:  13 r23:  13 r24:  10 r25:   8 r26:   5 r27:   0 r28:   0 
r29:   0 r30:   3 r31:   2 
Registers used: 16 out of 35 (45.7%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   7 adiw  :   0 and   :   0 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   2 break :   0 breq  :  17 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 
brne  :   6 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   8 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  14 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   3 cpc   :   0 
cpi   :  16 cpse  :   3 dec   :   4 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   4 jmp   :   0 
ld    :   0 ldd   :   0 ldi   :  69 lds   :   0 lpm   :   3 lsl   :   0 
lsr   :   0 mov   :  16 movw  :   0 mul   :   3 muls  :   0 mulsu :   0 
neg   :   0 nop   :  15 or    :   0 ori   :   0 out   :  17 pop   :   5 
push  :   5 rcall :  46 ret   :  13 reti  :   0 rjmp  :  21 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   6 sbic  :   1 sbis  :  16 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   0 
sub   :   3 subi  :   4 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 31 out of 113 (27.4%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002fc    664     36    700   32768   2.1%
[.dseg] 0x000060 0x000060      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 2 warnings
